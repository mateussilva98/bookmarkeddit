version: "3.8"

services:
  client:
    image: bookmarkeddit-client:latest
    build:
      context: ./app
      dockerfile: Dockerfile
    env_file:
      - ./app/.env.production
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - app-network

  server:
    image: bookmarkeddit:latest
    build:
      context: ./server
      dockerfile: Dockerfile
    # Use Docker secrets for sensitive config, mount as REDDIT_CLIENT_ID and REDDIT_CLIENT_SECRET
    deploy:
      replicas: 5
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
      - NODE_ENV=production
    secrets:
      - source: CLIENT_ID
        target: REDDIT_CLIENT_ID
      - source: CLIENT_SECRET
        target: REDDIT_CLIENT_SECRET
    networks:
      - app-network

  # Uncomment the following section if you want to use Nginx as a reverse proxy - it was replaced by Caddy - keep in mind that with ngix you need to manage SSL certificates yourself or set up a cron job to renew them weith certbot (letsencrypt)
  #nginx:
  #  image: nginx:latest
  #  ports:
  #    - "80:80"
  #    - "443:443"
  #  volumes:
  #    - ./nginx/conf.d:/etc/nginx/conf.d
  #    - ./nginx/ssl:/etc/nginx/ssl
  #  depends_on:
  #    - server
  #    - client
  #  deploy:
  #    replicas: 1
  #    placement:
  #      constraints: [node.role == manager]
  #  networks:
  #    - app-network

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - server
      - client
      - plausible
    networks:
      - app-network

  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    restart: always
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  plausible_db:
    image: postgres:14
    restart: always
    volumes:
      - plausible_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/plausible_db_password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=plausible_db
    secrets:
      - source: PLAUSIBLE_DB_PASSWORD
        target: plausible_db_password
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  plausible:
    image: plausible/analytics:latest
    restart: always
    command: sh -c "echo 'Waiting for plausible_db (PostgreSQL) DNS resolution...'; while ! getent hosts plausible_db > /dev/null; do echo 'plausible_db not resolvable, sleeping...'; sleep 1; done; echo 'plausible_db DNS resolved.'; echo 'Waiting for PostgreSQL port 5432...'; while ! nc -z plausible_db 5432; do echo 'PostgreSQL port not open, sleeping...'; sleep 1; done; echo 'PostgreSQL is up.'; echo 'Waiting for clickhouse DNS resolution...'; while ! getent hosts clickhouse > /dev/null; do echo 'clickhouse not resolvable, sleeping...'; sleep 1; done; echo 'clickhouse DNS resolved.'; echo 'Waiting for ClickHouse port 8123...'; while ! nc -z clickhouse 8123; do echo 'ClickHouse port not open, sleeping...'; sleep 1; done; echo 'ClickHouse is up.'; echo 'Proceeding with Plausible database setup and startup.'; /entrypoint.sh db createdb_postgresql && /entrypoint.sh db createdb_clickhouse && /entrypoint.sh db migrate && /entrypoint.sh run"
    depends_on:
      - plausible_db
      - clickhouse
    ports:
      - "8000:8000"
    env_file:
      - ./plausible.env
    networks:
      - app-network

networks:
  app-network:
    driver: overlay

volumes:
  caddy_data:
    external: true
  caddy_config:
    external: true
  plausible_db_data: {}
  clickhouse_data: {}

secrets:
  CLIENT_ID:
    external: true
  CLIENT_SECRET:
    external: true
  PLAUSIBLE_DB_PASSWORD:
    external: true
