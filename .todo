Next up:
  ‚òê general mobile styling improvments
    ‚òê show/hide filters
      ‚òê use filter icon on the right side of the input text filter to toggle the filters on mobile





Deployment:
  ‚òê dockerize the app (docker-compose) and make sure everything is working as expected
  ‚òê get a vps and configure from scratch (caddy for ssl, nginx for reverse proxy, etc.) and make sure everything is working as expected - maybe get vps from https://www.hetzner.com/
  ‚òê get a domain and configure it to point to the vps and make sure everything is working as expected
  ‚òê add a readme file to the repo with instructions on how to run the app locally and how to deploy it
  ‚òê add a license file to the repo (maybe MIT or something like that)
  ‚òê add a .env file to the repo with instructions on how to create it and what to put in it
  ‚òê create a github actions file to automate the deployment process (build and push the docker image to docker hub, and deploy it to the vps)
  ‚òê add an image to track the app usage (maybe using google analytics or something like that)
  ‚òê Docker Swarm? Even tho i don't plan to scale your app across multiple VPS nodes (i.e., clustering), I still want built-in service discovery, load balancing, and failover, zero-downtime rolling updates for services and its a simpler alternative to Kubernetes for orchestrating containers.
  

‚òê when finalized, create reddit posts to show off the app

Backlog - to implement:
  ‚òê post content in markdown 
  ‚òê add locale to settings
  ‚òê export to csv file
  ‚òê performance improvements (maybe related to images?)
    ‚òê Option 1: Implement Virtual Scrolling (Windowing) - The most effective solution would be to implement virtual scrolling (windowing), which only renders the items currently visible in the viewport.
    ‚òê Option 2: Debounce Search and Resize: - Debounce the search input and grid resize calculations to avoid excessive re-renders and recalculations. (can i calculate based on image properties and associate them with the posts?)
    ‚òê Option 3: Optimize Grid Calculations - Consider using CSS-only masonry layouts (e.g., grid-template-rows: masonry) if browser support is sufficient, or switch to a simpler layout for large lists.
    ‚òê Option 4: Pagination or Infinite Scroll - Instead of showing all posts, implement pagination or infinite scrolling to load posts in chunks. (Infinite scroll is already implemented, but maybe not in the best way)
  ‚òê highlight the seached text on the posts (and show how many posts matched) 
  ‚òê replace implemented logic with a library like Winston, Pino, Morgan, Buyan or log4js that sabes the logs to a file and/or sends them to a remote server for analysis.
  




Backlog - (features to consider for future updates):
  ‚òê Dashboard and Stats (Create a dashboard showing statistics about saved posts, Track saving patterns, favorite subreddits, etc.)
  ‚òê Add text customization (font size, line spacing)
  ‚òê Pin posts (Allow users to pin certain posts to the top of their saved list for easy access)
  ‚òê PWA (service worker, manifest, install prompt, icons, etc.)


Bug Fixes and Improvements:
  ‚òê Video sound not working. not really important, but would be nice to have







If you want just one container (e.g., the Node.js server) to have multiple replicas for load balancing ‚Äî even on a single VPS ‚Äî here‚Äôs what you should consider:

üõ† Best Solution: Docker Swarm
Docker Compose does not support scaling with built-in load balancing across container replicas. But Docker Swarm does. With Swarm, you can:

Scale a service (e.g., the server) using:

docker service scale server=3
Get internal load balancing between replicas.

Use a reverse proxy like Traefik or Nginx (Swarm-aware) to balance external HTTP traffic.

üö´ Why not plain Docker Compose?
You can technically scale with:


docker-compose up --scale server=3

But:

It won't automatically load balance traffic to those replicas.

It creates multiple containers with no built-in way to spread traffic unless you manually configure an external load balancer.


üîÅ Alternatives:
Traefik or Nginx manually configured in Docker Compose to balance across multiple server containers.


‚úÖ Recommendation (for a single VPS with replica needs):
Use Docker Swarm for proper container-level service scaling and built-in load balancing.

Or, use Docker Compose + Nginx as a load balancer, but this requires more manual setup.



If you want to track visits to your website running on your MERN + Docker Swarm stack, here are three solid approaches, depending on how detailed and privacy-aware you want the tracking to be:

‚úÖ Option 1: Use a Self-Hosted Web Analytics Tool (Recommended)
These tools work similarly to Google Analytics but run on your own server, which:

Gives you full control of the data

Is often GDPR-compliant out of the box

Can be deployed as Docker services alongside your stack

üîß Recommended tools:
1. Plausible Analytics (lightweight, privacy-focused)
Easy to self-host (Docker)

Script-based frontend tracking (like Google Analytics)

Dashboards + metrics like page views, bounce rate, referral sources

Deployment: Add it to your Swarm stack:

yaml

plausible:
  image: plausible/analytics
  environment:
    - BASE_URL=https://yourdomain.com
    - SECRET_KEY=your-super-secret
  ports:
    - "8000:8000"
  networks:
    - mern-net
üëâ GitHub

2. Matomo (formerly Piwik, full GA replacement)
Much more advanced

Supports event tracking, goals, heatmaps, user behavior

Heavier to run, but works great for high-traffic.

‚úÖ Option 2: Use Nginx Access Logs for Passive Tracking
If you already use Nginx as a reverse proxy, you can:

Enable access logs

Pipe logs into GoAccess or Matomo Log Analytics

Example:
nginx
Copiar
Editar
log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent"';

access_log /var/log/nginx/access.log main;
Then analyze with:

bash
Copiar
Editar
goaccess /var/log/nginx/access.log --log-format=COMBINED --real-time-html
üß† This is a no-JavaScript, low-resource solution. Good for simple stats like IPs, paths, referrers.

‚úÖ Option 3: Use Google Analytics or Cloud-based Trackers (Quick & Free)
If you're okay with a 3rd-party tool:

Drop the GA4 or Plausible JS snippet into your React app:

js
Copiar
Editar
// index.js or App.js
ReactGA.initialize('G-XXXXXXX');
ReactGA.pageview(window.location.pathname + window.location.search);
But:

You don't control the data.

It may conflict with privacy regulations depending on your audience.

üß† TL;DR Recommendations:
Use Case	Tool	Pros	Cons
Privacy-friendly, easy	Plausible	Lightweight, Docker-ready	Limited advanced features
Deep analytics, complex	Matomo	Full-featured	Heavier, more setup
Fast, no JS, basic logs	Nginx + GoAccess	Lightweight, no cookies	No event/session tracking
Quickest, least control	Google Analytics	Free, simple	Not privacy-respecting
